# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_utils.gpu.ipynb (unless otherwise specified).

__all__ = ['list_all_gpus', 'get_num_gpus', 'set_gpu_memory_limit', 'set_gpu_list_memory_limit']

# Cell

import tensorflow as tf

from .misc import log_error

# Cell

def list_all_gpus() -> list:
    '''
    Inputs:
        None
    Outpus:
        return: physical_device_list |list|
    '''
    return tf.config.experimental.list_physical_devices('GPU')

def get_num_gpus() -> int:
    '''
    Get a list of the physical devices and return the length of the list
    Inputs:
        None
    Outputs:
        return: number of physical devices |int|
    '''
    physical_devices = tf.config.experimental.list_physical_devices('GPU')
    return len(physical_devices)

def set_gpu_memory_limit(physical_gpu_device, limit: int = 4096):
    '''
    Take a GPU device and set the memory limit in MB

    Inputs:
        param: physical_devices |Tensorflow GPU device|
        kwarg: limit |int| (The memory limit for the GPU in MB)
    Outputs:
        Tensorflow memory usage set
    '''
    try:
        tf.config.experimental.set_virtual_device_configuration(physical_gpu_device, [tf.config.experimental.VirtualDeviceConfiguration(memory_limit=4096)])
    except Exception as exception:
        log_error('Exception: {} \nVirtual devices must be set before GPUs have been initialized'.format(exception))

def set_gpu_list_memory_limit(physical_devices: list, limit: int = 4096):
    '''
    Take a list of GPU devices and set the memory limit in MB

    Inputs:
        param: physical_devices |list| (A list of physical devices such as the one generated by list_all_gpus())
        kwarg: limit |int| (The memory limit for all the GPUs in the list in MB)
    Outputs:
        Tensorflow memory usage set
    '''
    for physical_device in physical_devices:
        set_gpu_memory_limit(physical_device, limit=limit)
# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_utils.schema.ipynb (unless otherwise specified).

__all__ = ['verify_audioengine_dataset', 'audioengine_dataset_schema',
           'verify_audioengine_internal_audio_representation_schema',
           'audioengine_internal_audio_representation_schema']

# Cell

import schema
from typing import Any

# Cell

audioengine_dataset_schema = schema.Schema(
        {
            'info': {
                'year': int,
                'version': str,
                'description': str,
                'contributor': str,
                'url': str,
                'date_created': str,
                'task': schema.Or(lambda n: n=='classification', lambda n: n=='segmentation')
            },
            'licenses': [{
                'id': int,
                'name': str,
                'url': str
            }],
            schema.Optional('annotations'): [{
                'id': int,
                'audio_id': int,
                'category_id': int,
                schema.Optional('segmentation'): [[int]]
            }],
            'audio': [{
                'id': int,
                'file_name': str,
                schema.Optional('length'): int,
                schema.Optional('license'): int,
                schema.Optional('date_captured'): str,
                schema.Optional('category_id'): int
            }],
            'categories': [{
                'id': int,
                'name': str,
                'supercategory': str,
            }]
        }
    )

def verify_audioengine_dataset(dataset_json):
    return audioengine_dataset_schema.is_valid(dataset_json)

# Cell

audioengine_internal_audio_representation_schema = schema.Schema(
        [{
                'id': int,
                'file_name': str,
                'audio_data': Any,
                'category_id': int,
        }]
    )
def verify_audioengine_internal_audio_representation_schema(data):
    return audioengine_internal_audio_representation_schema.is_valid(data)